import{_ as s,c as o,o as l,d as e}from"./app.c84b9057.js";const A=JSON.parse('{"title":"快速上手","description":"","frontmatter":{},"headers":[{"level":2,"title":"目录结构","slug":"目录结构","link":"#目录结构","children":[]}],"relativePath":"nestjs/快速上手.md"}'),a={name:"nestjs/快速上手.md"},n=e(`<h1 id="快速上手" tabindex="-1">快速上手 <a class="header-anchor" href="#快速上手" aria-hidden="true">#</a></h1><blockquote><p>新项目是有写了一个hello world接口的</p><p>照着人家的结构可以快速的上手</p></blockquote><h2 id="目录结构" tabindex="-1">目录结构 <a class="header-anchor" href="#目录结构" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">src</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;"> app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">controller</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">spec</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts </span><span style="color:#676E95;font-style:italic;">// controller 的测试文件</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;"> app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">controller</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts      </span><span style="color:#676E95;font-style:italic;">// controller，路由和预处理</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;"> app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">module</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts          </span><span style="color:#676E95;font-style:italic;">// module，为模块注册用</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;"> app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">service</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts         </span><span style="color:#676E95;font-style:italic;">// service 真正的逻辑</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;"> main</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts                </span><span style="color:#676E95;font-style:italic;">// 程序入口</span></span>
<span class="line"></span></code></pre></div><p>照着这个结构就能很直观的知道在哪里该写什么</p><blockquote><p>首先要明白Nest是没有单独路由配置的，使用的是装饰器</p><p>装饰器可以理解为一个封装好的函数，相当于语法糖</p></blockquote><ol><li>端口号在<code>main.ts</code>修改</li><li>请求方法在<code>app.controller.ts </code>使用<code>@Controller</code>装饰器定义控制器，<code>@Get</code> 是get请求方法装饰器，还有<code>@Put</code>、<code>@Post</code>等等.....</li><li>逻辑都写在<code>app.service.ts</code></li><li><code>app.module.ts</code> 这里就是模块的引导机制了 <ul><li>使用的<code>@Module()</code>装饰器 接收四个参数<code>providers</code> 、 <code>controllers</code> 、<code>imports</code> 、<code>exports</code><ul><li>providers：<code>Nest.js</code>注入器实例化的提供者（服务提供者），处理具体的业务逻辑，各个模块之间可以共享</li><li>controllers：处理http请求，包括路由控制，向客户端返回响应，将具体业务逻辑委托给providers处理</li><li>imports：导入模块的列表，如果需要使用其他模块的服务，需要通过这里导入</li><li>exports：导出服务的列表，供其他模块导入使用。如果希望当前模块下的服务可以被其他模块共享，需要在这里配置导出</li></ul></li></ul></li></ol>`,7),p=[n];function t(c,r,i,d,D,y){return l(),o("div",null,p)}const _=s(a,[["render",t]]);export{A as __pageData,_ as default};
